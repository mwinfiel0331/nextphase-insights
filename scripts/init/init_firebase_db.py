import sys
from pathlib import Path
import firebase_admin
from firebase_admin import credentials, firestore
from datetime import datetime
import uuid
import logging

# Add project root to Python path
project_root = str(Path(__file__).parent.parent.parent)
sys.path.append(project_root)

from src.services.user_service import UserService
from src.services.client_service import ClientService
from src.services.client_intake_service import ClientIntakeService
from src.services.client_process_service import ClientProcessService
from src.services.client_process_steps_service import ClientProcessStepsService

logger = logging.getLogger(__name__)
def initialize_firebase():
    """Initialize Firebase Admin SDK"""
    try:
        # Check if already initialized
        if not firebase_admin._apps:
            key_path = 'nextphase-insights-firebase-adminsdk.json'
            cred = credentials.Certificate(key_path)
            firebase_admin.initialize_app(cred)
        return firestore.client()
    except Exception as e:
        logger.error(f"Firebase initialization error: {e}")
        raise

def create_test_data(db):
    """Create test data in Firebase collections"""
    try:
        # Initialize services
        user_service = UserService(db)
        
        # Create test users with minimal required fields
        users_data = [
            {
                'email': 'mbolcar3@gmail.com',  # Remove user_id - will be generated by service
                'company_name': 'NextPhase Insights',
                'full_name': 'Melissa Bolcar',
                'app_role': 'admin',
                'is_active': True
            },
            {
                'email': 'melissa.bolcar@gmail.com',
                'company_name': 'NextPhase',
                'full_name': 'Melissa Bolcar',
                'app_role': 'client',
                'is_active': True
            }
        ]
        
        # Create users and verify creation
        created_users = []
        for user_data in users_data:
            user = user_service.create_user(user_data)
            if user:
                created_users.append(user)
            else:
                raise ValueError(f"Failed to create user: {user_data['email']}")

        if not created_users:
            raise ValueError("No users were created")

        # Create test clients using created user IDs
        clients_data = [
            {
                'client_id': str(uuid.uuid4()),
                'company_name': 'Acme Corp',
                'industry': 'Technology',
                'company_size': '51-200',
                'contact_name': 'John Doe',
                'contact_email': 'john.doe@example.com',
                'contact_role': 'Process Manager',
                'created_at': firestore.SERVER_TIMESTAMP,
                'updated_at': firestore.SERVER_TIMESTAMP
            }
        ]

        # Initialize other services
        client_service = ClientService(db)
        intake_service = ClientIntakeService(db)
        process_service = ClientProcessService(db)
        steps_service = ClientProcessStepsService(db)

        created_clients = [client_service.create_client(client) for client in clients_data]


        # Create test intakes using service
        intakes_data = [
            {

                'client_id': uuid.uuid4(),  
                'business_description': 'Software development company',
                'current_challenges': 'Manual deployment processes',
                'primary_pain_point': 'Time-consuming QA process',
                'optimization_goals': 'Automate deployment pipeline',
            }
        ]
        
        created_intakes = [intake_service.create_intake(intake) for intake in intakes_data]

        # Create test client intakes
        intakes_data = [
            {
                'intake_id': str(uuid.uuid4()),
                'client_id': created_clients[0].client_id,  # Fix: Access attribute directly
                'business_description': 'Software development company',
                'current_challenges': 'Manual deployment processes',
                'primary_pain_point': 'Time-consuming QA process',
                'optimization_goals': 'Automate deployment pipeline',
                'created_at': firestore.SERVER_TIMESTAMP,
                'updated_at': firestore.SERVER_TIMESTAMP
            }
        ]

        # Create test processes using service
        processes_data = [
            {
                'client_id': created_clients[0].client_id,
                'process_name': 'Software Deployment',
                'process_goal': 'Deploy software updates',
                'process_start': 'Code merge to main',
                'process_end': 'Production deployment',
                'automation_needs': 'Automated testing'
            }
        ]
        
        created_processes = [process_service.create_process(process) for process in processes_data]

        # Create test process steps
        steps_data = [
            {
                'client_id': created_clients[0].client_id,  # Add client_id
                'process_id': created_processes[0].process_id,
                'step_number': 1,
                'description': 'Code review',
                'performer': 'Senior Developer',
                'current_tools': ['GitHub', 'VS Code'],
                'desired_tools': ['Automated Code Review'],
                'duration': '2 hours',
                'pain_points': 'Manual review process',
                'approvals': 'Tech Lead approval'
            }
        ]
        
        # Create steps using service
        created_steps = [
            steps_service.create_step(
                process_id=created_processes[0].process_id,
                step_data=step
            ) for step in steps_data
        ]

        # Create test tool assessments
        tool_assessments_data = [
            {
                'assessment_id': str(uuid.uuid4()),
                'client_id': created_clients[0].client_id,  # Fix: Access attribute directly
                'client_name': created_clients[0].company_name,  # Fix: Access attribute directly
                'communication_messaging': ['Slack', 'Microsoft Teams'],
                'task_project_mgmt': ['Jira', 'Trello'],
                'calendar_scheduling': ['Google Calendar', 'Calendly'],
                'productivity': ['Microsoft Office 365'],
                'crm': ['Salesforce'],
                'ecom_payments': ['Stripe', 'PayPal'],
                'data_analytics': ['Google Analytics', 'Tableau'],
                'social_media_mgmt': ['Hootsuite'],
                'cloud': ['AWS', 'Azure'],
                'marketing_advertising': ['HubSpot', 'Google Ads'],
                'automation_workflow': ['Zapier'],
                'customer_support': ['Zendesk'],
                'created_at': firestore.SERVER_TIMESTAMP,
                'updated_at': firestore.SERVER_TIMESTAMP
            }
        ]


        # Insert data into Firestore
        collections = {
            'clients': clients_data,
            'client-intakes': intakes_data,
            'client-processes': processes_data,
            'client-process-steps': steps_data,
            'client-tool-assessment': tool_assessments_data  # Add new collection
        }

        for collection_name, data in collections.items():
            collection = db.collection(collection_name)
            for doc in data:
                doc_id = doc.get('user_id') or doc.get('client_id') or doc.get('intake_id') or doc.get('process_id') or doc.get('step_id') or doc.get('assessment_id')
                collection.document(doc_id).set(doc)
                logger.info(f"Created document in {collection_name}: {doc_id}")

        
        logger.info("Test data creation completed successfully")
        return True

    except Exception as e:
        logger.error(f"Error creating test data: {e}")
        raise

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    """Main initialization function"""
    try:
        db = initialize_firebase()
        create_test_data(db)
        logger.info("Database initialization completed successfully")
    except Exception as e:
        logger.error(f"Initialization failed: {e}")
        raise